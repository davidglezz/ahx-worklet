import { AHXWaves, FilterWaveform } from "./types";

export function buildAHXWaves() {
  const filterSets: AHXWaves = Array.from({ length: 31 + 1 + 31 });
  filterSets[31] = {
    Sawtooth04: GenerateSawtooth(0x04),
    Sawtooth08: GenerateSawtooth(0x08),
    Sawtooth10: GenerateSawtooth(0x10),
    Sawtooth20: GenerateSawtooth(0x20),
    Sawtooth40: GenerateSawtooth(0x40),
    Sawtooth80: GenerateSawtooth(0x80),
    Triangle04: GenerateTriangle(0x04),
    Triangle08: GenerateTriangle(0x08),
    Triangle10: GenerateTriangle(0x10),
    Triangle20: GenerateTriangle(0x20),
    Triangle40: GenerateTriangle(0x40),
    Triangle80: GenerateTriangle(0x80),
    Squares: GenerateSquare(),
    WhiteNoiseBig: GenerateWhiteNoise(0x280 * 3),
  };
  GenerateFilterWaveforms(filterSets);
  return filterSets;
}

function GenerateTriangle(Len: number) {
  const Buffer: number[] = [];
  const d2 = Len;
  const d5 = d2 >> 2;
  const d1 = 128 / d5;
  const d4 = -(d2 >> 1);
  let eax = 0;
  for (let ecx = 0; ecx < d5; ecx++) {
    Buffer.push(eax);
    eax += d1;
  }
  Buffer.push(0x7f);
  if (d5 !== 1) {
    eax = 128;
    for (let ecx = 0; ecx < d5 - 1; ecx++) {
      eax -= d1;
      Buffer.push(eax);
    }
  }
  let esi = Buffer.length + d4;
  for (let ecx = 0; ecx < d5 * 2; ecx++) {
    let neu = Buffer[esi++];
    if (neu === 0x7f) neu = -0x80;
    else neu = -neu;
    Buffer.push(neu);
  }
  return Buffer;
}

function GenerateSquare() {
  const Buffer = [];
  for (let ebx = 1; ebx <= 0x20; ebx++) {
    for (let ecx = 0; ecx < (0x40 - ebx) * 2; ecx++) Buffer.push(-0x80);
    for (let ecx = 0; ecx < ebx * 2; ecx++) Buffer.push(0x7f);
  }
  return Buffer;
}

function GenerateSawtooth(Len: number) {
  const Buffer = [];
  const ebx = Math.floor(256 / (Len - 1));
  let eax = -128;
  for (let ecx = 0; ecx < Len; ecx++) {
    Buffer.push(eax);
    eax += ebx;
  }
  return Buffer;
}

function GenerateWhiteNoise(Len: number) {
  const noise = [
    127, 127, -88, -30, 120, 62, 44, -110, 82, -43, -128, -128, -85, -128, 127, 55, 127, 127, 21,
    59, -68, 102, -13, 127, -128, -128, -128, -128, 66, -27, -8, -128, 127, 127, 38, 127, -128,
    -105, -128, 95, -89, 127, -128, -128, -128, 127, 127, 127, -50, 121, -116, -128, 74, 127, -128,
    22, 127, 127, -128, -128, 9, -15, -128, -107, 120, 120, 127, -72, -30, 82, 127, 8, -109, 127,
    127, -128, -5, -88, 68, -27, -54, 9, 127, -128, 127, -128, -53, -128, 127, -9, -128, -128, -73,
    127, 91, -128, 59, 20, -49, -128, 127, -128, 22, 31, 103, -95, 98, 113, 113, -89, 127, 68, 65,
    -128, 127, -51, 65, 67, 75, -13, -128, -57, -33, -33, -43, 39, 31, 31, -97, 54, 36, 115, 113,
    127, -128, 127, 121, 66, 127, 127, -128, -128, -128, 46, 34, 127, -14, 70, -128, -128, -76, -46,
    53, 46, -128, -113, -75, -68, -128, 56, -14, 127, 16, 45, 127, 127, 38, -111, 127, -16, 127,
    -33, 43, 127, -128, 62, 127, 127, -128, -128, -85, -82, 127, -54, -128, -128, -13, -70, 52,
    -128, -128, 127, 127, -128, 62, 102, -128, 23, -128, -85, -128, 9, -13, 127, 41, -128, -60, 127,
    -128, -45, 127, -70, -128, 127, -128, -99, 127, -128, 56, -128, 127, 127, 127, 105, 127, 127,
    21, 79, -128, 124, -116, 27, 127, 127, -128, -128, 112, 43, -128, 127, 90, -63, 127, -128, 127,
    69, -69, -128, 127, -9, -50, -128, -128, -128, -38, -99, 127, -128, 127, -70, -30, 2, -128,
    -107, -70, -128, -6, -2, -128, -76, -128, -128, -120, 127, 127, 18, -128, -128, 14, -101, -128,
    -128, 79, -55, 43, -128, 119, -75, 127, 81, 127, 127, 127, 127, -128, 127, -15, -128, 49, -26,
    -128, 127, -128, -91, -128, 127, -54, 127, 37, -128, -110, -76, 127, -128, -105, 127, 127, -108,
    32, 27, 59, 127, -18, -54, -128, -128, 66, -128, -128, -93, -128, -59, -15, -128, 127, 127, 127,
    81, -81, 127, 53, 66, -128, 127, -15, -128, -59, 127, 127, 127, -128, 40, 127, -77, 44, 44, -22,
    127, 127, -128, 127, 33, -87, 127, 52, 127, -82, 30, -59, -65, -82, 127, -117, 55, 127, 13,
    -128, 115, 35, -69, -128, -128, -58, -128, -74, -128, 127, -128, -128, 127, 127, -128, 33, 127,
    32, 69, -89, -54, 127, -128, -128, -128, 61, 127, 21, 69, -13, -40, -117, -101, -50, 85, -128,
    -128, 127, -67, -50, 127, 54, -128, 127, -65, 98, 35, 7, 37, -15, -54, 89, 127, -86, 127, 127,
    71, -109, -128, 27, 33, -128, -101, -54, -128, 45, -128, -104, 127, 127, 127, -18, -128, -128,
    -128, 127, 32, 59, -128, 60, 34, -49, 127, -128, -128, 89, -99, 127, 42, 127, -128, 124, -128,
    -45, 33, -128, -89, 127, 127, -128, 9, 61, 127, 127, -82, -128, -89, -128, 127, 115, 5, 61,
    -128, 127, 127, 127, 38, 59, 127, -10, -128, 127, 94, 71, -33, -128, 124, 54, 54, 127, -1, -68,
    -68, -68, 127, 127, 127, -128, -128, 77, 33, 127, 127, 127, 65, 77, -128, 127, 127, -128, -64,
    -81, 44, 127, 23, 53, -128, -128, 127, -16, 60, 18, -121, 127, -128, -128, 19, 115, 45, 62,
    -128, 127, -128, -90, -40, 25, -128, 127, 39, -128, 127, -128, 127, -128, 127, 35, -128, 77,
    -128, 127, 127, -119, 127, -128, -75, 74, 23, -81, -120, -107, -128, 112, 119, -105, 127, -128,
    -128, 34, -101, 2, 47, -128, -128, -104, 127, 127, 18, 45, 40, -50, -81, -112, 88, -23, 26, 113,
    47, 92, 127, -128, 127, 127, -128, 127, 71, -51, -81, 44, 6, -128, 47, -128, -24, -128, 46, 88,
    17, -41, -83, 88, 67, 23, -97, 112, -61, -128, 112, 25, -61, 55, 46, 66, -128, 44, -68, -128,
    127, 127, 127, 16, 69, 45, 62, 62, -112, -128, -90, -40, 91, -128, 127, 39, -128, 127, -128, 51,
    -128, 117, -128, 127, 127, -108, -128, 33, -15, 127, -18, 127, -82, -10, -82, -128, 65, -128,
    -91, 127, 64, 127, -118, 61, 18, -35, 127, -98, 127, -110, 54, 102, 25, -128, -128, -89, -96,
    -112, -128, 95, 35, 87, -128, 49, -128, 45, 54, -96, -46, -113, -39, 63, -128, 62, -128, 41,
    -40, -83, 127, 127, 81, -69, 112, -53, -75, -36, 61, -62, -73, 127, -70, -128, 62, -128, 127,
    59, 68, -128, -90, 127, -128, -128, 124, -128, 97, 127, -54, 127, 127, -128, -1, 52, 127, 70, 5,
    127, 36, 127, 127, 127, 127, -68, 127, 127, 127, -128, 127, 21, 127, -50, -27, 127, -128, 127,
    -67, 88, -123, 51, 127, 126, -128, -128, -128, 127, 127, -128, 127, -9, 50, -108, 64, 115, 127,
    127, -18, -36, 127, 36, 127, 127, -70, -58, 39, 33, -107, -128, 61, -92, -128, 127, 127, -128,
    127, 127, -108, 127, 127, -108, -128, 97, 127, -128, 127, 127, 121, -128, 66, 127, -66, -128,
    -128, -62, 67, -9, -84, -84, -128, 127, 127, 127, -128, 20, 127, 21, 127, -62, 29, 127, -128,
    127, -69, -128, -128, -128, -128, -74, 127, 127, 68, 127, 9, 7, -128, 127, -128, 127, 127, -106,
    127, -50, -128, -128, 97, 101, -128, 45, 74, 127, 127, -128, 127, 70, -128, 127, -86, 68, -128,
    -53, -119, 127, -128, 127, -128, 127, -114, -97, -128, -61, 67, 113, -103, -128, 127, 71, 65,
    -81, -128, 59, -74, 127, 114, -128, -47, -128, 127, 68, -128, 47, 127, 127, 66, -128, 127, -16,
    127, 69, 127, -128, 127, -128, -64, -81, 127, -100, 30, 53, 127, -54, 101, -15, 60, -110, -76,
    -96, -128, 127, 127, 15, -41, 115, -128, 14, -128, 127, -128, 124, -54, -57, -83, -128, -128,
    61, -98, -16, -126, -115, -39, 25, 127, -109, 127, -128, -128, -128, -104, -128, -128, 127, 59,
    40, -50, 9, 127, 94, -23, -128, -128, 127, 69, -128, -6, 127, 127, -128, 127, -128, 127, 127,
    17, -128, -76, 44, -128, 19, 127, -128, -128, -59, 127, 127, -18, -126, -128, -128, 65, -128,
    17, 127, -128, -63, 127, -83, 127, 127, 127, -127, -15, -128, 49, -96, -128, 127, 127, 37, 87,
    127, -60, -128, 45, 54, 127, -67, -128, -39, 127, -69, 127, -128, 47, 127, 54, -128, 62, 88,
    -128, -128, 65, 95, -128, 34, -128, -128, -52, 127, 127, 36, -59, 41, -26, -60, 127, -128, -47,
    -128, 58, 12, -95, -128, -73, 127, -66, -128, 20, -107, -128, -13, 127, -119, -128, -63, 127,
    -128, 127, 127, -88, 30, -61, 67, 33, -128, -128, 127, 71, -51, 123, -128, 59, -128, 127, 37,
    -128, -47, 39, -119, 127, -128, 40, -92, -112, 127, 89, 127, 36, 127, -79, 92, 127, -65, 127,
    127, -128, 22, -128, -37, -128, 127, -128, 127, 127, -11, -78, 127, 127, -128, 127, 15, -128,
    -128, -128, 119, -128, 46, -128, 60, -96, 127, 43, 127, 104, -128, -64, 127, 127, 127, 16, -75,
    127, -54, 17, -111, -128, -107, 127, 127, 127, 127, -128, -128, -53, -128, 127, -127, 127, -84,
    -86, 127, 127, -128, -109, 58, -64, -128, -128, -104, 82, -128, 127, -31, -88, -36, -123, -77,
    118, 127, -70, -128, 127, -93, -128, -76, -128, -58, 33, 127, 15, 127, 127, -128, 9, 127, 127,
    127, -95, -8, 127, -93, 127, 38, -128, -61, -128, 65, 43, 127, 127, -128, -63, 85, 127, 127,
    127, -81, -128, -128, -128, 49, -128, 127, 127, -65, 82, 57, 102, 115, -9, 92, -23, -128, 127,
    127, 66, 85, -128, -128, -110, 127, 127, -128, -105, 127, 21, -128, 35, 27, -69, -102, -128,
    -128, -128, -74, 40, -66, -128, 127, 15, -21, -16, -128, 95, -55, 33, 107, 127, 76, -128, 127,
    -83, -60, -63, 127, -106, 127, 127, -81, 127, -31, -98, -128, 127, -77, -10, -128, -128, -128,
    -128, -85, -16, -128, -128, -6, 58, 127, -128, -128, -119, 127, 8, 127, -128, 127, -128, -6, 68,
    -113, 9, 127, -128, 127, -128, -128, 34, -101, 127, -72, -128, 127, 127, -128, 127, 21, 45, 127,
    127, 127, -107, 88, -109, 127, -16, -30, -36, 127, 21, 127, -128, 127, -127, 127, -14, -108,
    -128, -128, 127, -128, 127, -50, -128, -128, -128, -128, -128, -101, -128, 63, -94, -128, -104,
    2, 127, 32, 41, -88, 120, 127, 68, 105, 17, 127, -54, 65, 77, 23, 127, 127, -128, -128, 112, -9,
    127, -4, -128, -128, 127, -50, 127, -128, -128, 74, 29, -128, 77, 127, -128, 127, -14, -128, -2,
    -128, -128, -20, 98, 127, 127, -1, -128, -53, -128, 127, -128, -64, 127, -128, 78, 33, 53, 12,
    -81, -78, 127, -128, 62, -16, -106, -84, 127, 43, -22, -128, -128, -128, -128, -96, 127, 68,
    127, 127, 109, -57, 127, 36, -128, 42, 127, -128, 60, -128, -20, 127, -128, -24, -128, -92, 42,
    62, 86, -128, -128, -45, -37, -75, -64, -128, 127, -81, 20, 53, -128, 56, 127, -106, 127, 127,
    104, 127, 127, 65, 127, 68, 127, -128, -57, -57, -128, -128, -128, 20, -128, 127, 127, -36, 29,
    127, 127, 127, -65, -128, 92, -128, 119, -9, -64, -63, -128, 35, 89, -128, -128, 127, -83, -36,
    127, -118, -119, 127, -70, 127, 127, -128, -87, -128, -128, 127, 75, -111, 127, 76, 127, 68,
    -81, 127, 127, -128, 127, 127, -72, -128, 60, 127, 59, 127, -128, -24, -128, 127, 122, 44, 86,
    -128, 127, -128, -24, 127, 127, 23, 63, 127, -40, 5, 115, -33, 45, -76, -128, 127, -107, -128,
    -116, 127, 127, -29, -128, 9, 37, 127, 127, 127, 127, -86, 127, 21, -61, -81, -70, -128, -128,
    44, -16, -70, 127, 127, 104, 127, 127, 127, 23, 79, -123, -128, -128, 112, 127, -101, 98, 45,
    -128, -128, -101, -128, -128, -107, -128, -104, 127, -9, 127, 54, -128, -128, -128, 127, 39,
    -128, 127, -54, 39, -128, 14, -128, 58, -128, -128, 49, -16, 127, -108, -78, 82, 127, -128,
    -128, -120, 93, 5, -93, 20, -111, -128, -52, 127, -128, 127, 127, -128, -128, 127, -128, 127,
    127, 76, 127, -10, 127, 127, -128, -92, 127, 127, -107, 127, 36, 127, -9, 98, 127, -128, 33,
    127, 68, 127, 67, 77, -53, -128, 127, -128, -64, -128, 127, 127, 18, 53, 36, 75, -109, -112,
    -128, -128, -57, 43, -128, 59, 8, 127, 94, 127, 81, -128, -95, -78, -128, 127, -82, -128, 127,
    90, 75, -9, -128, -128, -62, 127, -128, -128, -110, 52, -128, -107, -84, -128, -89, 127, 127,
    17, 59, 60, 127, -128, 127, -128, -24, 102, 127, 127, 23, -41, -93, 58, -128, 112, -128, -128,
    127, 127, -128, -128, -128, 92, 45, -128, 23, 127, 127, -128, 56, -128, -85, 127, 15, -128, 127,
    -128, -128, -56, -15, -86, 127, 127, -128, 127, 127, -128, 79, -89, -60, -128, 2, 55, -128, 61,
    -128, 127, 127, -72, 127, -128, 47, 20, 19, -128, 56, -128, 127, -16, 127, 104, 127, 89, -23,
    42, -50, 123, 92, -128, -20, 127, 127, 127, -8, -128, -128, -120, 45, 127, 67, 19, -111, -40,
    -128, -60, 127, 59, 127, -128, -128, -53, -128, -128, -128, 127, -84, 127, 38, 127, -128, -128,
    -39, 39, 27, 127, 122, 52, 127, -128, 127, 127, 127, 12, 127, 127, 127, -128, 127, -128, 23,
    -128, 110, -128, 118, -128, -128, 95, -95, -96, -98, 127, 77, 85, -43, 25, 127, 127, 127, -128,
    19, -25, 44, 44,
  ];
  return noise.slice(0, Len);
}

function Filter(input: number[], fre: number, lowOrHigh: 0 | 1) {
  // 0 = low, 1 = high
  let high;
  let mid = 0.0;
  let low = 0.0;
  const output: number[] = [];
  for (let i = 0; i < input.length; i++) {
    high = input[i] - mid - low;
    high = Math.min(127.0, Math.max(-128.0, high));
    mid += high * fre;
    mid = Math.min(127.0, Math.max(-128.0, mid));
    low += mid * fre;
    low = Math.min(127.0, Math.max(-128.0, low));
  }
  for (let i = 0; i < input.length; i++) {
    high = input[i] - mid - low;
    high = Math.min(127.0, Math.max(-128.0, high));
    mid += high * fre;
    mid = Math.min(127.0, Math.max(-128.0, mid));
    low += mid * fre;
    low = Math.min(127.0, Math.max(-128.0, low));
    if (lowOrHigh) output.push(Math.floor(high));
    else output.push(Math.floor(low));
  }
  return output;
}

function GenerateFilterWaveforms(filterSets: FilterWaveform[]) {
  const src = filterSets[31];
  let freq = 8;
  let temp = 0;
  const fre = (freq * 1.25) / 100.0;
  while (temp < 31) {
    let dstLowSquares: number[] = [];
    let dstHighSquares: number[] = [];
    // squares alle einzeln filtern
    for (let i = 0; i < 0x20; i++) {
      dstLowSquares = dstLowSquares.concat(
        Filter(src.Squares.slice(i * 0x80, (i + 1) * 0x80), fre, 0),
      );
      dstHighSquares = dstHighSquares.concat(
        Filter(src.Squares.slice(i * 0x80, (i + 1) * 0x80), fre, 1),
      );
    }

    const dstLow: FilterWaveform = {
      Sawtooth04: Filter(src.Sawtooth04, fre, 0),
      Sawtooth08: Filter(src.Sawtooth08, fre, 0),
      Sawtooth10: Filter(src.Sawtooth10, fre, 0),
      Sawtooth20: Filter(src.Sawtooth20, fre, 0),
      Sawtooth40: Filter(src.Sawtooth40, fre, 0),
      Sawtooth80: Filter(src.Sawtooth80, fre, 0),
      Triangle04: Filter(src.Triangle04, fre, 0),
      Triangle08: Filter(src.Triangle08, fre, 0),
      Triangle10: Filter(src.Triangle10, fre, 0),
      Triangle20: Filter(src.Triangle20, fre, 0),
      Triangle40: Filter(src.Triangle40, fre, 0),
      Triangle80: Filter(src.Triangle80, fre, 0),
      Squares: dstLowSquares,
      WhiteNoiseBig: Filter(src.WhiteNoiseBig, fre, 0),
    };
    const dstHigh: FilterWaveform = {
      Sawtooth04: Filter(src.Sawtooth04, fre, 1),
      Sawtooth08: Filter(src.Sawtooth08, fre, 1),
      Sawtooth10: Filter(src.Sawtooth10, fre, 1),
      Sawtooth20: Filter(src.Sawtooth20, fre, 1),
      Sawtooth40: Filter(src.Sawtooth40, fre, 1),
      Sawtooth80: Filter(src.Sawtooth80, fre, 1),
      Triangle04: Filter(src.Triangle04, fre, 1),
      Triangle08: Filter(src.Triangle08, fre, 1),
      Triangle10: Filter(src.Triangle10, fre, 1),
      Triangle20: Filter(src.Triangle20, fre, 1),
      Triangle40: Filter(src.Triangle40, fre, 1),
      Triangle80: Filter(src.Triangle80, fre, 1),
      Squares: dstHighSquares,
      WhiteNoiseBig: Filter(src.WhiteNoiseBig, fre, 1),
    };

    filterSets[temp] = dstLow;
    filterSets[temp + 32] = dstHigh;

    temp++;
    freq += 3;
  }
}
