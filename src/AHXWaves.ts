interface FilterWaveform {
  Sawtooth04: number[];
  Sawtooth08: number[];
  Sawtooth10: number[];
  Sawtooth20: number[];
  Sawtooth40: number[];
  Sawtooth80: number[];
  Triangle04: number[];
  Triangle08: number[];
  Triangle10: number[];
  Triangle20: number[];
  Triangle40: number[];
  Triangle80: number[];
  Squares: number[];
  WhiteNoiseBig: number[];
}

export class AHXWaves {
  FilterSets: FilterWaveform[];
  constructor() {
    this.FilterSets = Array.from({ length: 31 + 1 + 31 });
    this.FilterSets[31] = {
      Sawtooth04: this.GenerateSawtooth(0x04),
      Sawtooth08: this.GenerateSawtooth(0x08),
      Sawtooth10: this.GenerateSawtooth(0x10),
      Sawtooth20: this.GenerateSawtooth(0x20),
      Sawtooth40: this.GenerateSawtooth(0x40),
      Sawtooth80: this.GenerateSawtooth(0x80),
      Triangle04: this.GenerateTriangle(0x04),
      Triangle08: this.GenerateTriangle(0x08),
      Triangle10: this.GenerateTriangle(0x10),
      Triangle20: this.GenerateTriangle(0x20),
      Triangle40: this.GenerateTriangle(0x40),
      Triangle80: this.GenerateTriangle(0x80),
      Squares: this.GenerateSquare(),
      WhiteNoiseBig: this.GenerateWhiteNoise(0x280 * 3),
    };
    this.GenerateFilterWaveforms();
  }

  GenerateTriangle(Len: number) {
    const Buffer: number[] = [];
    const d2 = Len;
    const d5 = d2 >> 2;
    const d1 = 128 / d5;
    const d4 = -(d2 >> 1);
    let eax = 0;
    for (let ecx = 0; ecx < d5; ecx++) {
      Buffer.push(eax);
      eax += d1;
    }
    Buffer.push(0x7f);
    if (d5 !== 1) {
      eax = 128;
      for (let ecx = 0; ecx < d5 - 1; ecx++) {
        eax -= d1;
        Buffer.push(eax);
      }
    }
    let esi = Buffer.length + d4;
    for (let ecx = 0; ecx < d5 * 2; ecx++) {
      let neu = Buffer[esi++];
      if (neu === 0x7f) neu = -0x80;
      else neu = -neu;
      Buffer.push(neu);
    }
    return Buffer;
  }

  GenerateSquare() {
    const Buffer = [];
    for (let ebx = 1; ebx <= 0x20; ebx++) {
      for (let ecx = 0; ecx < (0x40 - ebx) * 2; ecx++) Buffer.push(-0x80);
      for (let ecx = 0; ecx < ebx * 2; ecx++) Buffer.push(0x7f);
    }
    return Buffer;
  }

  GenerateSawtooth(Len: number) {
    const Buffer = [];
    const ebx = Math.floor(256 / (Len - 1));
    let eax = -128;
    for (let ecx = 0; ecx < Len; ecx++) {
      Buffer.push(eax);
      eax += ebx;
    }
    return Buffer;
  }

  GenerateWhiteNoise(Len: number) {
    const noise = [
      127, 127, 168, 226, 120, 62, 44, 146, 82, 213, 128, 128, 171, 128, 127, 55, 127, 127, 21, 59,
      188, 102, 243, 127, 128, 128, 128, 128, 66, 229, 248, 128, 127, 127, 38, 127, 128, 151, 128,
      95, 167, 127, 128, 128, 128, 127, 127, 127, 206, 121, 140, 128, 74, 127, 128, 22, 127, 127,
      128, 128, 9, 241, 128, 149, 120, 120, 127, 184, 226, 82, 127, 8, 147, 127, 127, 128, 251, 168,
      68, 229, 202, 9, 127, 128, 127, 128, 203, 128, 127, 247, 128, 128, 183, 127, 91, 128, 59, 20,
      207, 128, 127, 128, 22, 31, 103, 161, 98, 113, 113, 167, 127, 68, 65, 128, 127, 205, 65, 67,
      75, 243, 128, 199, 223, 223, 213, 39, 31, 31, 159, 54, 36, 115, 113, 127, 128, 127, 121, 66,
      127, 127, 128, 128, 128, 46, 34, 127, 242, 70, 128, 128, 180, 210, 53, 46, 128, 143, 181, 188,
      128, 56, 242, 127, 16, 45, 127, 127, 38, 145, 127, 240, 127, 223, 43, 127, 128, 62, 127, 127,
      128, 128, 171, 174, 127, 202, 128, 128, 243, 186, 52, 128, 128, 127, 127, 128, 62, 102, 128,
      23, 128, 171, 128, 9, 243, 127, 41, 128, 196, 127, 128, 211, 127, 186, 128, 127, 128, 157,
      127, 128, 56, 128, 127, 127, 127, 105, 127, 127, 21, 79, 128, 124, 140, 27, 127, 127, 128,
      128, 112, 43, 128, 127, 90, 193, 127, 128, 127, 69, 187, 128, 127, 247, 206, 128, 128, 128,
      218, 157, 127, 128, 127, 186, 226, 2, 128, 149, 186, 128, 250, 254, 128, 180, 128, 128, 136,
      127, 127, 18, 128, 128, 14, 155, 128, 128, 79, 201, 43, 128, 119, 181, 127, 81, 127, 127, 127,
      127, 128, 127, 241, 128, 49, 230, 128, 127, 128, 165, 128, 127, 202, 127, 37, 128, 146, 180,
      127, 128, 151, 127, 127, 148, 32, 27, 59, 127, 238, 202, 128, 128, 66, 128, 128, 163, 128,
      197, 241, 128, 127, 127, 127, 81, 175, 127, 53, 66, 128, 127, 241, 128, 197, 127, 127, 127,
      128, 40, 127, 179, 44, 44, 234, 127, 127, 128, 127, 33, 169, 127, 52, 127, 174, 30, 197, 191,
      174, 127, 139, 55, 127, 13, 128, 115, 35, 187, 128, 128, 198, 128, 182, 128, 127, 128, 128,
      127, 127, 128, 33, 127, 32, 69, 167, 202, 127, 128, 128, 128, 61, 127, 21, 69, 243, 216, 139,
      155, 206, 85, 128, 128, 127, 189, 206, 127, 54, 128, 127, 191, 98, 35, 7, 37, 241, 202, 89,
      127, 170, 127, 127, 71, 147, 128, 27, 33, 128, 155, 202, 128, 45, 128, 152, 127, 127, 127,
      238, 128, 128, 128, 127, 32, 59, 128, 60, 34, 207, 127, 128, 128, 89, 157, 127, 42, 127, 128,
      124, 128, 211, 33, 128, 167, 127, 127, 128, 9, 61, 127, 127, 174, 128, 167, 128, 127, 115, 5,
      61, 128, 127, 127, 127, 38, 59, 127, 246, 128, 127, 94, 71, 223, 128, 124, 54, 54, 127, 255,
      188, 188, 188, 127, 127, 127, 128, 128, 77, 33, 127, 127, 127, 65, 77, 128, 127, 127, 128,
      192, 175, 44, 127, 23, 53, 128, 128, 127, 240, 60, 18, 135, 127, 128, 128, 19, 115, 45, 62,
      128, 127, 128, 166, 216, 25, 128, 127, 39, 128, 127, 128, 127, 128, 127, 35, 128, 77, 128,
      127, 127, 137, 127, 128, 181, 74, 23, 175, 136, 149, 128, 112, 119, 151, 127, 128, 128, 34,
      155, 2, 47, 128, 128, 152, 127, 127, 18, 45, 40, 206, 175, 144, 88, 233, 26, 113, 47, 92, 127,
      128, 127, 127, 128, 127, 71, 205, 175, 44, 6, 128, 47, 128, 232, 128, 46, 88, 17, 215, 173,
      88, 67, 23, 159, 112, 195, 128, 112, 25, 195, 55, 46, 66, 128, 44, 188, 128, 127, 127, 127,
      16, 69, 45, 62, 62, 144, 128, 166, 216, 91, 128, 127, 39, 128, 127, 128, 51, 128, 117, 128,
      127, 127, 148, 128, 33, 241, 127, 238, 127, 174, 246, 174, 128, 65, 128, 165, 127, 64, 127,
      138, 61, 18, 221, 127, 158, 127, 146, 54, 102, 25, 128, 128, 167, 160, 144, 128, 95, 35, 87,
      128, 49, 128, 45, 54, 160, 210, 143, 217, 63, 128, 62, 128, 41, 216, 173, 127, 127, 81, 187,
      112, 203, 181, 220, 61, 194, 183, 127, 186, 128, 62, 128, 127, 59, 68, 128, 166, 127, 128,
      128, 124, 128, 97, 127, 202, 127, 127, 128, 255, 52, 127, 70, 5, 127, 36, 127, 127, 127, 127,
      188, 127, 127, 127, 128, 127, 21, 127, 206, 229, 127, 128, 127, 189, 88, 133, 51, 127, 126,
      128, 128, 128, 127, 127, 128, 127, 247, 50, 148, 64, 115, 127, 127, 238, 220, 127, 36, 127,
      127, 186, 198, 39, 33, 149, 128, 61, 164, 128, 127, 127, 128, 127, 127, 148, 127, 127, 148,
      128, 97, 127, 128, 127, 127, 121, 128, 66, 127, 190, 128, 128, 194, 67, 247, 172, 172, 128,
      127, 127, 127, 128, 20, 127, 21, 127, 194, 29, 127, 128, 127, 187, 128, 128, 128, 128, 182,
      127, 127, 68, 127, 9, 7, 128, 127, 128, 127, 127, 150, 127, 206, 128, 128, 97, 101, 128, 45,
      74, 127, 127, 128, 127, 70, 128, 127, 170, 68, 128, 203, 137, 127, 128, 127, 128, 127, 142,
      159, 128, 195, 67, 113, 153, 128, 127, 71, 65, 175, 128, 59, 182, 127, 114, 128, 209, 128,
      127, 68, 128, 47, 127, 127, 66, 128, 127, 240, 127, 69, 127, 128, 127, 128, 192, 175, 127,
      156, 30, 53, 127, 202, 101, 241, 60, 146, 180, 160, 128, 127, 127, 15, 215, 115, 128, 14, 128,
      127, 128, 124, 202, 199, 173, 128, 128, 61, 158, 240, 130, 141, 217, 25, 127, 147, 127, 128,
      128, 128, 152, 128, 128, 127, 59, 40, 206, 9, 127, 94, 233, 128, 128, 127, 69, 128, 250, 127,
      127, 128, 127, 128, 127, 127, 17, 128, 180, 44, 128, 19, 127, 128, 128, 197, 127, 127, 238,
      130, 128, 128, 65, 128, 17, 127, 128, 193, 127, 173, 127, 127, 127, 129, 241, 128, 49, 160,
      128, 127, 127, 37, 87, 127, 196, 128, 45, 54, 127, 189, 128, 217, 127, 187, 127, 128, 47, 127,
      54, 128, 62, 88, 128, 128, 65, 95, 128, 34, 128, 128, 204, 127, 127, 36, 197, 41, 230, 196,
      127, 128, 209, 128, 58, 12, 161, 128, 183, 127, 190, 128, 20, 149, 128, 243, 127, 137, 128,
      193, 127, 128, 127, 127, 168, 30, 195, 67, 33, 128, 128, 127, 71, 205, 123, 128, 59, 128, 127,
      37, 128, 209, 39, 137, 127, 128, 40, 164, 144, 127, 89, 127, 36, 127, 177, 92, 127, 191, 127,
      127, 128, 22, 128, 219, 128, 127, 128, 127, 127, 245, 178, 127, 127, 128, 127, 15, 128, 128,
      128, 119, 128, 46, 128, 60, 160, 127, 43, 127, 104, 128, 192, 127, 127, 127, 16, 181, 127,
      202, 17, 145, 128, 149, 127, 127, 127, 127, 128, 128, 203, 128, 127, 129, 127, 172, 170, 127,
      127, 128, 147, 58, 192, 128, 128, 152, 82, 128, 127, 225, 168, 220, 133, 179, 118, 127, 186,
      128, 127, 163, 128, 180, 128, 198, 33, 127, 15, 127, 127, 128, 9, 127, 127, 127, 161, 248,
      127, 163, 127, 38, 128, 195, 128, 65, 43, 127, 127, 128, 193, 85, 127, 127, 127, 175, 128,
      128, 128, 49, 128, 127, 127, 191, 82, 57, 102, 115, 247, 92, 233, 128, 127, 127, 66, 85, 128,
      128, 146, 127, 127, 128, 151, 127, 21, 128, 35, 27, 187, 154, 128, 128, 128, 182, 40, 190,
      128, 127, 15, 235, 240, 128, 95, 201, 33, 107, 127, 76, 128, 127, 173, 196, 193, 127, 150,
      127, 127, 175, 127, 225, 158, 128, 127, 179, 246, 128, 128, 128, 128, 171, 240, 128, 128, 250,
      58, 127, 128, 128, 137, 127, 8, 127, 128, 127, 128, 250, 68, 143, 9, 127, 128, 127, 128, 128,
      34, 155, 127, 184, 128, 127, 127, 128, 127, 21, 45, 127, 127, 127, 149, 88, 147, 127, 240,
      226, 220, 127, 21, 127, 128, 127, 129, 127, 242, 148, 128, 128, 127, 128, 127, 206, 128, 128,
      128, 128, 128, 155, 128, 63, 162, 128, 152, 2, 127, 32, 41, 168, 120, 127, 68, 105, 17, 127,
      202, 65, 77, 23, 127, 127, 128, 128, 112, 247, 127, 252, 128, 128, 127, 206, 127, 128, 128,
      74, 29, 128, 77, 127, 128, 127, 242, 128, 254, 128, 128, 236, 98, 127, 127, 255, 128, 203,
      128, 127, 128, 192, 127, 128, 78, 33, 53, 12, 175, 178, 127, 128, 62, 240, 150, 172, 127, 43,
      234, 128, 128, 128, 128, 160, 127, 68, 127, 127, 109, 199, 127, 36, 128, 42, 127, 128, 60,
      128, 236, 127, 128, 232, 128, 164, 42, 62, 86, 128, 128, 211, 219, 181, 192, 128, 127, 175,
      20, 53, 128, 56, 127, 150, 127, 127, 104, 127, 127, 65, 127, 68, 127, 128, 199, 199, 128, 128,
      128, 20, 128, 127, 127, 220, 29, 127, 127, 127, 191, 128, 92, 128, 119, 247, 192, 193, 128,
      35, 89, 128, 128, 127, 173, 220, 127, 138, 137, 127, 186, 127, 127, 128, 169, 128, 128, 127,
      75, 145, 127, 76, 127, 68, 175, 127, 127, 128, 127, 127, 184, 128, 60, 127, 59, 127, 128, 232,
      128, 127, 122, 44, 86, 128, 127, 128, 232, 127, 127, 23, 63, 127, 216, 5, 115, 223, 45, 180,
      128, 127, 149, 128, 140, 127, 127, 227, 128, 9, 37, 127, 127, 127, 127, 170, 127, 21, 195,
      175, 186, 128, 128, 44, 240, 186, 127, 127, 104, 127, 127, 127, 23, 79, 133, 128, 128, 112,
      127, 155, 98, 45, 128, 128, 155, 128, 128, 149, 128, 152, 127, 247, 127, 54, 128, 128, 128,
      127, 39, 128, 127, 202, 39, 128, 14, 128, 58, 128, 128, 49, 240, 127, 148, 178, 82, 127, 128,
      128, 136, 93, 5, 163, 20, 145, 128, 204, 127, 128, 127, 127, 128, 128, 127, 128, 127, 127, 76,
      127, 246, 127, 127, 128, 164, 127, 127, 149, 127, 36, 127, 247, 98, 127, 128, 33, 127, 68,
      127, 67, 77, 203, 128, 127, 128, 192, 128, 127, 127, 18, 53, 36, 75, 147, 144, 128, 128, 199,
      43, 128, 59, 8, 127, 94, 127, 81, 128, 161, 178, 128, 127, 174, 128, 127, 90, 75, 247, 128,
      128, 194, 127, 128, 128, 146, 52, 128, 149, 172, 128, 167, 127, 127, 17, 59, 60, 127, 128,
      127, 128, 232, 102, 127, 127, 23, 215, 163, 58, 128, 112, 128, 128, 127, 127, 128, 128, 128,
      92, 45, 128, 23, 127, 127, 128, 56, 128, 171, 127, 15, 128, 127, 128, 128, 200, 241, 170, 127,
      127, 128, 127, 127, 128, 79, 167, 196, 128, 2, 55, 128, 61, 128, 127, 127, 184, 127, 128, 47,
      20, 19, 128, 56, 128, 127, 240, 127, 104, 127, 89, 233, 42, 206, 123, 92, 128, 236, 127, 127,
      127, 248, 128, 128, 136, 45, 127, 67, 19, 145, 216, 128, 196, 127, 59, 127, 128, 128, 203,
      128, 128, 128, 127, 172, 127, 38, 127, 128, 128, 217, 39, 27, 127, 122, 52, 127, 128, 127,
      127, 127, 12, 127, 127, 127, 128, 127, 128, 23, 128, 110, 128, 118, 128, 128, 95, 161, 160,
      158, 127, 77, 85, 213, 25, 127, 127, 127, 128, 19, 231, 44, 44,
    ];
    const outNoise = [];
    for (let x = 0; x < Len; x++) {
      if (noise[x] & 0x80)
        outNoise.push((noise[x] & 0x7f) - 0x80); // signed char
      else outNoise.push(noise[x]);
    }
    return outNoise;
  }

  Filter(input: number[], fre: number, lowOrHigh: 0 | 1) {
    // 0 = low, 1 = high
    let high;
    let mid = 0.0;
    let low = 0.0;
    const output: number[] = [];
    for (let i = 0; i < input.length; i++) {
      high = input[i] - mid - low;
      high = Math.min(127.0, Math.max(-128.0, high));
      mid += high * fre;
      mid = Math.min(127.0, Math.max(-128.0, mid));
      low += mid * fre;
      low = Math.min(127.0, Math.max(-128.0, low));
    }
    for (let i = 0; i < input.length; i++) {
      high = input[i] - mid - low;
      high = Math.min(127.0, Math.max(-128.0, high));
      mid += high * fre;
      mid = Math.min(127.0, Math.max(-128.0, mid));
      low += mid * fre;
      low = Math.min(127.0, Math.max(-128.0, low));
      if (lowOrHigh) output.push(Math.floor(high));
      else output.push(Math.floor(low));
    }
    return output;
  }

  GenerateFilterWaveforms() {
    const src = this.FilterSets[31];
    let freq = 8;
    let temp = 0;
    const fre = (freq * 1.25) / 100.0;
    while (temp < 31) {
      let dstLowSquares: number[] = [];
      let dstHighSquares: number[] = [];
      // squares alle einzeln filtern
      for (let i = 0; i < 0x20; i++) {
        dstLowSquares = dstLowSquares.concat(
          this.Filter(src.Squares.slice(i * 0x80, (i + 1) * 0x80), fre, 0),
        );
        dstHighSquares = dstHighSquares.concat(
          this.Filter(src.Squares.slice(i * 0x80, (i + 1) * 0x80), fre, 1),
        );
      }

      const dstLow: FilterWaveform = {
        Sawtooth04: this.Filter(src.Sawtooth04, fre, 0),
        Sawtooth08: this.Filter(src.Sawtooth08, fre, 0),
        Sawtooth10: this.Filter(src.Sawtooth10, fre, 0),
        Sawtooth20: this.Filter(src.Sawtooth20, fre, 0),
        Sawtooth40: this.Filter(src.Sawtooth40, fre, 0),
        Sawtooth80: this.Filter(src.Sawtooth80, fre, 0),
        Triangle04: this.Filter(src.Triangle04, fre, 0),
        Triangle08: this.Filter(src.Triangle08, fre, 0),
        Triangle10: this.Filter(src.Triangle10, fre, 0),
        Triangle20: this.Filter(src.Triangle20, fre, 0),
        Triangle40: this.Filter(src.Triangle40, fre, 0),
        Triangle80: this.Filter(src.Triangle80, fre, 0),
        Squares: dstLowSquares,
        WhiteNoiseBig: this.Filter(src.WhiteNoiseBig, fre, 0),
      };
      const dstHigh: FilterWaveform = {
        Sawtooth04: this.Filter(src.Sawtooth04, fre, 1),
        Sawtooth08: this.Filter(src.Sawtooth08, fre, 1),
        Sawtooth10: this.Filter(src.Sawtooth10, fre, 1),
        Sawtooth20: this.Filter(src.Sawtooth20, fre, 1),
        Sawtooth40: this.Filter(src.Sawtooth40, fre, 1),
        Sawtooth80: this.Filter(src.Sawtooth80, fre, 1),
        Triangle04: this.Filter(src.Triangle04, fre, 1),
        Triangle08: this.Filter(src.Triangle08, fre, 1),
        Triangle10: this.Filter(src.Triangle10, fre, 1),
        Triangle20: this.Filter(src.Triangle20, fre, 1),
        Triangle40: this.Filter(src.Triangle40, fre, 1),
        Triangle80: this.Filter(src.Triangle80, fre, 1),
        Squares: dstHighSquares,
        WhiteNoiseBig: this.Filter(src.WhiteNoiseBig, fre, 1),
      };

      this.FilterSets[temp] = dstLow;
      this.FilterSets[temp + 32] = dstHigh;

      temp++;
      freq += 3;
    }
  }
}
